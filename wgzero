#! /usr/bin/env bash

CONFIGFOLDER="/etc/wgzero/.wgzero"
WG0="/etc/wireguard/wg0.conf"
PORT=$(shuf -n 1 -i 10000-65535)
IPv6Prefix="fd00::"
TEMPLATEURL="https://raw.githubusercontent.com/finzzz/wgzero/master/template"

RED=$'\033[1;31m'
GREEN=$'\033[0;32m'
ORANGE=$'\033[0;33m'
CYAN=$'\033[0;36m'
NC=$'\033[0m'

Run(){
    IsRoot
    CheckPackages "wg iptables curl qrencode ipcalc jq"

    case "$1" in
    "install")
        Install ;;
    "list")
        List ;;
    "add")
        Add "$@" ;;
    "del")
        Del "$@" ;;
    "qr")
        QR "$2" ;;
    *)
        Print "Unknown command: $1\\n" "red"
        Print "Available commands: install | list | add <client> [client ... ] | del <client> [client...] | qr <client>\\n" "red" ;;
    esac
}

Print(){
    case "$2" in
    "red")
        echo -en "${RED}$1${NC}" ;;
    "cyan")
        echo -en "${CYAN}$1${NC}" ;;
    "orange")
        echo -en "${ORANGE}$1${NC}" ;;
    *)
        echo -en "${GREEN}$1${NC}" ;;
    esac
}

Read(){
    read -rp "${ORANGE}$1 [$2]: ${NC}" VAL
    VAL=${VAL:-"$2"}
}

WriteConfig(){
    Read "$1" "$2"
    echo "$1=$VAL" >> "$CONFIGFOLDER/conf"
}

IsRoot(){
    if [[ ! "$EUID" -eq 0 ]]
    then
        Print "Must be run as root\\n" "red" && exit 1
    fi
}

CheckPackages(){
    for i in $1; do 
        if [[ ! $(command -v "$i") ]]; then
            Print "$i: command not found, please check required packages.\\n" "red" && exit 1
        fi
    done
}

SetInterface(){
    INTERFACES=$(ip l | grep -oP ": (\K[0-9a-z]*)" | grep -v lo)
    DEFAULT=$(echo "$INTERFACES" | head -1)

    Print "Available interfaces :\\n" "cyan" && echo "$INTERFACES"
    WriteConfig "Interface" "$DEFAULT"
}

GetConf(){
    grep -i "$1" "$CONFIGFOLDER/conf" | cut -d "=" -f 2
}

GeneratePrivateKey(){
    PRIVKEY=$(/usr/bin/wg genkey)
}

GeneratePublicKey(){
    echo "$2" \
    | tee "$1/priv.key" \
    | /usr/bin/wg pubkey > "$1/pub.key"
}

Init(){
    if [ -d "$CONFIGFOLDER" ] || [ -f "$WG0" ]; then
        Read "Config folder .wgzero already exists, do you want to overwrite" "y/N"
        if [ "$VAL" == "y" ]; then
            rm -rf "$CONFIGFOLDER" "$WG0"
            ip link del wg0 2>/dev/null
        else
            exit 1
        fi
    fi

    mkdir -p "$CONFIGFOLDER" && chmod 750 "$CONFIGFOLDER"

   # Generate scripts
    curl -so "$CONFIGFOLDER/postup.sh" "$TEMPLATEURL/postup.sh"
    curl -so "$CONFIGFOLDER/postdown.sh" "$TEMPLATEURL/postdown.sh"
    curl -so "$WG0" "$TEMPLATEURL/wg0.conf" && chmod 600 "$WG0"

    chmod +x "$CONFIGFOLDER"/post{up,down}.sh
}

EnableIPForward(){
    sed -i 's/\#net.ipv4.ip_forward=1/net.ipv4.ip_forward=1/' /etc/sysctl.conf
    echo 1 > /proc/sys/net/ipv4/ip_forward
    
    if grep -q "IPv6Prefix" "$CONFIGFOLDER/conf"; then
        sed -i 's/\#net.ipv6.conf.all.forwarding=1/net.ipv6.conf.all.forwarding=1/' /etc/sysctl.conf
        echo 1 > /proc/sys/net/ipv6/conf/all/forwarding
    fi
    
    /usr/sbin/sysctl -p -q
}

Install(){
    Init
    
    SetInterface && IFACE=$(GetConf interface)
    sed -i "s/IFACE/$IFACE/g" "$CONFIGFOLDER"/post{up,down}.sh

    WriteConfig "Server" "$(curl -s ip.me)"
    WriteConfig "Port" "$PORT"
    WriteConfig "Subnet" "10.10.0.1/24"

    # Print "Generate server keys\\n"
    GeneratePrivateKey
    Read "Specify private key" "none"
    [ "$VAL" != "none" ] && PRIVKEY="$VAL"
    GeneratePublicKey "$CONFIGFOLDER" "$PRIVKEY"

    TYPE="IPv4"
    Read "Enable IPv6" "y/N"
    if [ "$VAL" == "y" ]; then
        TYPE="NAT"
        Read "IPv6 Prefix" "$IPv6Prefix" && echo "IPv6Prefix=$VAL" >> "$CONFIGFOLDER/conf"
        Read "IPv6 Subnet" "64" && echo "IPv6Subnet=$VAL" >> "$CONFIGFOLDER/conf"

        Print "External routing: \\n" "orange"
        Print "[1] NAT\\n" "cyan"
        Print "[2] Full Routing\\n" "cyan"
        Read "Selection" "1"

        echo "ExternalRouting=$VAL" >> "$CONFIGFOLDER/conf"
        if [ "$VAL" == "2" ]; then
            TYPE="FR" 

            Read "Configure ndppd" "y/N"
            if [ "$VAL" == "y" ]; then
                CheckPackages ndppd

                curl -so /etc/ndppd.conf "$TEMPLATEURL/ndppd.conf"
                sed -i -e "s/IFACE/$IFACE/g" -e "s/PREFIX/$(GetConf IPv6Prefix)/g" /etc/ndppd.conf
                systemctl enable ndppd.service
                systemctl restart ndppd.service
            fi
        fi
    fi

    EnableIPForward # && Print "Enable IP forward\\n"

    # Print "Generate config file\\n"
    IPv4Addr=$(/usr/bin/ipcalc -b "$(GetConf subnet)" | grep -i hostmin | tr -s " " | cut -d " " -f 2)

    sed -i -e "s/SERVER/$IPv4Addr/g" -e "s#PRIVKEY#$(cat "$CONFIGFOLDER"/priv.key)#g" \
    -e "s/PORT/$(GetConf port)/g" -e "s#CONFDIR#$CONFIGFOLDER#g" -e "s/TYPE/$TYPE/g" "$WG0"

    if grep -q "IPv6Prefix" "$CONFIGFOLDER/conf"; then
        SetClientIPv6
        IPv6Addr="$(GetConf IPv6Prefix)$VAL/$(GetConf IPv6Subnet)"
        sed -i "s#^Address.*#&, $IPv6Addr#g" "$WG0"
    fi
    
    # Print "Enable service\\n"
    wg-quick up wg0 2>/dev/null
    systemctl enable wg-quick@wg0

    Print "Done, make sure $(GetConf port)/UDP is open\\n" "red"
}

SetClientIPv4(){
    PREFIX=$(GetConf subnet | cut -d "." -f 1,2,3)
    MIN=$(/usr/bin/ipcalc -b "$(GetConf subnet)" | grep -i hostmin | cut -d "." -f 4 | tr -d " ")
    MAX=$(/usr/bin/ipcalc -b "$(GetConf subnet)" | grep -i hostmax | cut -d "." -f 4 | tr -d " ")

    for i in $(seq "$MIN" "$MAX"); do
        DEFAULT="$PREFIX.$i"
        grep -q "$DEFAULT" $WG0 || break
    done

    Read "Choose client IPv4" "$DEFAULT"
}

SetClientIPv6(){
    VAL=$(head -c 2 /dev/random | od -A n -t x2 | tr -d " ") ## randomize IPv6
}

QR(){
    CFG="$CONFIGFOLDER/$1/conf"
    [ ! -f "$CFG" ] && Print "Client doesn't exist\\n" "red" && exit

    Print "\\n$1.conf\\n`cat $CFG`\\n" "red"
    /usr/bin/qrencode -t ansiutf8 < "$CFG"
}

List(){
    PUBKEYS=$(grep -i "publickey" "$WG0" | tr -d " " | cut -d "=" -f 2)
    for i in $PUBKEYS
    do
        CLIENT=$(grep -r "$i" "$CONFIGFOLDER" | cut -d "/" -f 5)
        IP=$(grep -i address "$CONFIGFOLDER/$CLIENT/conf" | tr -d " " | cut -d "=" -f 2)
        Print "$CLIENT $IP $i\\n" "orange"
    done
}

Add(){
    NAME="$2"

    [[ ! "$NAME" ]] && exit
    [[ -d "$CONFIGFOLDER/$NAME" ]] && Print "Client already exists\\n" "red" && exit

    mkdir "$CONFIGFOLDER/$NAME"
    GeneratePrivateKey
    GeneratePublicKey "$CONFIGFOLDER/$NAME" "$PRIVKEY"

    SetClientIPv4 && CLIENT_IP="$VAL"

    # appending server config
    TMP=$(mktemp)
    cat >>"$TMP" <<EOF 
# $NAME
[Peer]
PublicKey = $(cat "$CONFIGFOLDER/$NAME/pub.key")
AllowedIPs = $CLIENT_IP/32

EOF

    # generate client config
    cat >"$CONFIGFOLDER/$NAME/conf" <<EOF
[Interface]
Address = $CLIENT_IP/32
PrivateKey = $(cat "$CONFIGFOLDER/$NAME/priv.key")
EOF

    # Make sure the DNS server is listed in the [Interface] section
    Read "DNS" "none" && [ "$VAL" != "none" ] && echo "DNS = $VAL" >> "$CONFIGFOLDER/$NAME/conf"

    PUBKEY=$(cat "$CONFIGFOLDER/pub.key")
    ENDPOINT="$(GetConf server):$(GetConf port)"

    cat >>"$CONFIGFOLDER/$NAME/conf" <<EOF

[Peer]
PublicKey = $PUBKEY
Endpoint = $ENDPOINT
AllowedIPs = 0.0.0.0/0
EOF

    # handle IPv6
    if grep -q "IPv6Prefix" "$CONFIGFOLDER/conf"; then
        SetClientIPv6 # set default

        Read "Choose client IPv6" "$(GetConf IPv6Prefix)$VAL" && IPv6Addr="$VAL"

        sed -i -e "s|^Address.*$|&, $IPv6Addr/128|g" \
        -e "s|^AllowedIPs.*$|&, ::/0|g" \
        "$CONFIGFOLDER/$NAME/conf"

        sed -i "s|^AllowedIPs.*$|&, $IPv6Addr/128|g" "$TMP"
    fi

    # advanced config
    Read "Edit allowed IPs?" "y/N"
    if [ "$VAL" == "y" ]; then
        ALLOWEDIPS=$(grep -i allowedips "$CONFIGFOLDER/$NAME/conf" | tr -d " " | cut -d "=" -f 2)
        Read "Allowed IPs" "$ALLOWEDIPS"
        [ "$VAL" != "$ALLOWEDIPS" ] && sed -i "s|AllowedIPs = .*|AllowedIPs = $VAL|g" "$CONFIGFOLDER/$NAME/conf"
    fi

    # write and apply new config
    cat "$TMP" >> "$WG0" && rm -rf "$TMP"
    wg addconf wg0 <(wg-quick strip wg0)

    # show qr
    QR "$NAME"
}

Del(){
    CFG="$CONFIGFOLDER/$2"
    if [ -d "$CFG" ]; then
        ENTRY=$(grep -m 1 -n "# $2" "$WG0" | cut -d ":" -f 1)
        sed -ie "$ENTRY,$((ENTRY + 4))d" "$WG0"

        wg set wg0 peer "$(cat "$CFG/pub.key")" remove
        wg addconf wg0 <(wg-quick strip wg0)

        rm -rf "$CFG"
    else
        Print "Client doesn't exist\\n" "red"
    fi
}

Run "$@"
